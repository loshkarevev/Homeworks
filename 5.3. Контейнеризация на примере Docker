1
•	Высоконагруженное монолитное java веб-приложение; - физическая машина. Т.к. это монолит, то без доработок самого приложения на микросервисы его не разбить. Не виртуалка, т.к. приложение высоконагруженное и не хочется у него еще забирать еще ресурсы на гипервизор.
•	Go-микросервис для генерации отчетов; - докер. Докер идеально подходят для микросервисов.
•	Nodejs веб-приложение; - докер. Противопоказаний для использований классического веб-приложения нет.
•	Мобильное приложение c версиями для Android и iOS; - виртуалка. Как я понял для докера возникают трудности с эмуляцией UI.
•	База данных postgresql используемая, как кэш; - виртуалка. Для БД не рекомендуется использовать, т.к. данные в образе не хранятся.
•	Шина данных на базе Apache Kafka; - докер или виртуалка. Если передаваемые данные супер критичные, то виртуалка, если не очень, то контейнер, т.к. в случае выключения контейнера потеряется незначительное кол-во данных.
•	Очередь для Logstash на базе Redis; - физическая машина. Т.к. требуется высокая производительность.
•	Elastic stack для реализации логирования продуктивного веб-приложения - три ноды elasticsearch, два logstash и две ноды kibana; - виртуалка точно заработает, отказоустойчивость обеспечена собственными средствами. Но нашел и реализацию для докера https://github.com/sqshq/ELK-docker.
•	Мониторинг-стек на базе prometheus и grafana; - докер. Особых минусов такой реализации я не вижу, а все плюсы использования докера остаются.
•	Mongodb, как основное хранилище данных для java-приложения; - виртуалка. Т.к. не сильно нагруженное приложение. Докер для БД не рекомендуется.
•	Jenkins-сервер. – докер, Классическое кейс для докера.

2
docker pull loshkarev/hey_netology

3
